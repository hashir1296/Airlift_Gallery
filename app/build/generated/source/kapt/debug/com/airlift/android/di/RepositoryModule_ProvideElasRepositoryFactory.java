// Generated by Dagger (https://dagger.dev).
package com.airlift.android.di;

import com.airlift.android.db.CacheMapper;
import com.airlift.android.db.PhotoDao;
import com.airlift.android.modules.curatedList.model.CuratedPhotoMapper;
import com.airlift.android.network.AirliftApi;
import com.airlift.android.network.AirliftRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideElasRepositoryFactory implements Factory<AirliftRepository> {
  private final Provider<AirliftApi> airliftApiProvider;

  private final Provider<CacheMapper> cacheMapperProvider;

  private final Provider<CuratedPhotoMapper> curatedPhotoMapperProvider;

  private final Provider<PhotoDao> photoDaoProvider;

  public RepositoryModule_ProvideElasRepositoryFactory(Provider<AirliftApi> airliftApiProvider,
      Provider<CacheMapper> cacheMapperProvider,
      Provider<CuratedPhotoMapper> curatedPhotoMapperProvider,
      Provider<PhotoDao> photoDaoProvider) {
    this.airliftApiProvider = airliftApiProvider;
    this.cacheMapperProvider = cacheMapperProvider;
    this.curatedPhotoMapperProvider = curatedPhotoMapperProvider;
    this.photoDaoProvider = photoDaoProvider;
  }

  @Override
  public AirliftRepository get() {
    return provideElasRepository(airliftApiProvider.get(), cacheMapperProvider.get(), curatedPhotoMapperProvider.get(), photoDaoProvider.get());
  }

  public static RepositoryModule_ProvideElasRepositoryFactory create(
      Provider<AirliftApi> airliftApiProvider, Provider<CacheMapper> cacheMapperProvider,
      Provider<CuratedPhotoMapper> curatedPhotoMapperProvider,
      Provider<PhotoDao> photoDaoProvider) {
    return new RepositoryModule_ProvideElasRepositoryFactory(airliftApiProvider, cacheMapperProvider, curatedPhotoMapperProvider, photoDaoProvider);
  }

  public static AirliftRepository provideElasRepository(AirliftApi airliftApi,
      CacheMapper cacheMapper, CuratedPhotoMapper curatedPhotoMapper, PhotoDao photoDao) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideElasRepository(airliftApi, cacheMapper, curatedPhotoMapper, photoDao));
  }
}
