// Generated by Dagger (https://dagger.dev).
package com.airlift.android.modules.curatedList.adapter;

import com.airlift.android.db.CacheMapper;
import com.airlift.android.modules.curatedList.model.CuratedPhotoMapper;
import com.airlift.android.network.AirliftRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CuratedPhotoDataSource_Factory implements Factory<CuratedPhotoDataSource> {
  private final Provider<AirliftRepository> repositoryProvider;

  private final Provider<CacheMapper> cacheMapperProvider;

  private final Provider<CuratedPhotoMapper> curatedPhotoMapperProvider;

  public CuratedPhotoDataSource_Factory(Provider<AirliftRepository> repositoryProvider,
      Provider<CacheMapper> cacheMapperProvider,
      Provider<CuratedPhotoMapper> curatedPhotoMapperProvider) {
    this.repositoryProvider = repositoryProvider;
    this.cacheMapperProvider = cacheMapperProvider;
    this.curatedPhotoMapperProvider = curatedPhotoMapperProvider;
  }

  @Override
  public CuratedPhotoDataSource get() {
    return newInstance(repositoryProvider.get(), cacheMapperProvider.get(), curatedPhotoMapperProvider.get());
  }

  public static CuratedPhotoDataSource_Factory create(
      Provider<AirliftRepository> repositoryProvider, Provider<CacheMapper> cacheMapperProvider,
      Provider<CuratedPhotoMapper> curatedPhotoMapperProvider) {
    return new CuratedPhotoDataSource_Factory(repositoryProvider, cacheMapperProvider, curatedPhotoMapperProvider);
  }

  public static CuratedPhotoDataSource newInstance(AirliftRepository repository,
      CacheMapper cacheMapper, CuratedPhotoMapper curatedPhotoMapper) {
    return new CuratedPhotoDataSource(repository, cacheMapper, curatedPhotoMapper);
  }
}
